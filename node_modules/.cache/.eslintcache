[{"/home/serban/MultiSigWalletApplication/src/index.js":"1","/home/serban/MultiSigWalletApplication/src/App.js":"2","/home/serban/MultiSigWalletApplication/src/contract-interactions/CreateTx.js":"3","/home/serban/MultiSigWalletApplication/src/contract-interactions/ManageTx.js":"4","/home/serban/MultiSigWalletApplication/src/contract-interactions/FundContract.js":"5","/home/serban/MultiSigWalletApplication/src/nav-bar/NavBar.js":"6","/home/serban/MultiSigWalletApplication/src/connection-screen/ConnectionScreen.js":"7","/home/serban/MultiSigWalletApplication/src/info-contract/ContractDetails.js":"8"},{"size":183,"mtime":1643013362018,"results":"9","hashOfConfig":"10"},{"size":1557,"mtime":1643111304809,"results":"11","hashOfConfig":"10"},{"size":2401,"mtime":1643106329443,"results":"12","hashOfConfig":"10"},{"size":4203,"mtime":1643104777550,"results":"13","hashOfConfig":"10"},{"size":2628,"mtime":1643111802343,"results":"14","hashOfConfig":"10"},{"size":731,"mtime":1643042346427,"results":"15","hashOfConfig":"10"},{"size":2781,"mtime":1643109205738,"results":"16","hashOfConfig":"10"},{"size":688,"mtime":1643106171775,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rmik56",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/serban/MultiSigWalletApplication/src/index.js",[],"/home/serban/MultiSigWalletApplication/src/App.js",["39"],"import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NavBar from \"./nav-bar/NavBar\";\nimport CreateTx from \"./contract-interactions/CreateTx\";\nimport ManageTx from \"./contract-interactions/ManageTx\";\nimport ConnectionScreen from \"./connection-screen/ConnectionScreen\";\nimport FundContract from \"./contract-interactions/FundContract\";\n\nfunction App(props) {\n  // details about the account\n  const [account, setAccount] = useState(\"0x0\");\n  const [balance, setBalance] = useState(0);\n  const [confirmation, setConfirmation] = useState(false);\n\n  const [txSubmited, setTxSubmited] = useState(false);\n\n  return confirmation ? (\n    <div className=\"App\">\n      <NavBar balance={balance} address={account} />\n      <div class=\"container-lg my-4\">\n        <div class=\"row\">\n          <div class=\"col-md-4 bg-dark text-light\">\n            <h1 class=\"my-4 font-link\">Contract</h1>\n            <FundContract setBalance={setBalance} />\n          </div>\n          <div class=\"col my-2\">\n            <div class=\"container-sm\">\n              <CreateTx value={txSubmited} setTxSubmited={setTxSubmited} />\n              <ManageTx value={txSubmited} setTxSubmited={setTxSubmited} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"App\">\n      <NavBar balance=\"0\" address=\"0x0\" />\n      <ConnectionScreen\n        setAccount={setAccount}\n        setConfirmation={setConfirmation}\n        setBalance={setBalance}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/home/serban/MultiSigWalletApplication/src/contract-interactions/CreateTx.js",[],"/home/serban/MultiSigWalletApplication/src/contract-interactions/ManageTx.js",["40"],"import { useEffect, useState } from \"react\";\nimport {\n  addressContract,\n  contractAbi,\n} from \"../info-contract/ContractDetails.js\";\n\nconst ethers = require(\"ethers\");\n\nfunction ManageTx(props) {\n  const [addressSender, setAddressSender] = useState(\"0x00\");\n  const [value, setValue] = useState(0);\n  const [numberOfConfirmations, setConfirmations] = useState(0);\n  const [approval, setApproval] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      GetContractDetails();\n    }, 1000);\n  }, [props.value]);\n\n  // Get contract\n  function getContract() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(addressContract, contractAbi, signer);\n\n    return contract;\n  }\n\n  // Get informations about the deployed contract\n  async function GetContractDetails() {\n    const contract = getContract();\n    const submitedTx = await contract.callStatic.getLastTx();\n\n    if (!submitedTx[2]) {\n      setAddressSender(submitedTx[0]);\n      setValue(ethers.utils.formatEther(submitedTx[1]));\n      setConfirmations(submitedTx[3].toNumber());\n\n      const walletAddress = window.ethereum.selectedAddress;\n\n      const getLastTxIndex = await contract.callStatic.getTxCount();\n      const getApprovals = await contract.callStatic.getUserApproval(\n        getLastTxIndex.toNumber() - 1,\n        walletAddress\n      );\n\n      if (getApprovals) {\n        setApproval(getApprovals);\n      }\n    }\n    props.setTxSubmited(!submitedTx[2]);\n  }\n\n  // Approve transaction\n  async function ApproveTx() {\n    const contract = getContract();\n    const getLastTxIndex = await contract.callStatic.getTxCount();\n    const temp = await contract.approve(getLastTxIndex.toNumber() - 1);\n\n    if (temp) {\n      GetContractDetails();\n      alert(\"Tx aproved\");\n    }\n  }\n\n  // Execute tansaction\n  async function ExecuteTx() {\n    const contract = getContract();\n    const getLastTxIndex = await contract.callStatic.getTxCount();\n    const temp = await contract.execute(getLastTxIndex.toNumber() - 1);\n\n    if (temp) {\n      GetContractDetails();\n      alert(\"Tx executed\");\n    }\n  }\n\n  // Revoke submited transaction\n  async function RevokeTx() {\n    const contract = getContract();\n    const getLastTxIndex = await contract.callStatic.getTxCount();\n    const temp = await contract.revokeTx(getLastTxIndex.toNumber() - 1);\n\n    if (temp) {\n      GetContractDetails();\n      alert(\"Tx Revoked\");\n    }\n\n    props.setTxSubmited(false);\n  }\n\n  // Revoke approval\n  async function RevokeApproval() {\n    const contract = getContract();\n    const getLastTxIndex = await contract.callStatic.getTxCount();\n    const temp = await contract.revokeApproval(getLastTxIndex.toNumber() - 1);\n\n    if (temp) {\n      GetContractDetails();\n      alert(\"Approval Revoked\");\n    }\n  }\n\n  return (\n    <div class=\"card my-4 font-link\">\n      <div class=\"card-header\">\n        <h4 class=\"text-dark\">Manage Tx</h4>\n      </div>\n      <div class=\"card-body\">\n        <div>\n          <h5 class=\"form-label text-start\">Address: {addressSender}</h5>\n        </div>\n        <div class=\"my-4\">\n          <h5 class=\"form-label text-start\">Amount: {value} ETH</h5>\n        </div>\n        <div class=\"my-4\">\n          <h5 class=\"form-label text-start\">\n            Confirmations {numberOfConfirmations}\n          </h5>\n        </div>\n        <div class=\"d-flex\">\n          {approval === false ? (\n            <button class=\"btn btn-primary my-2\" onClick={ApproveTx}>\n              {\" \"}\n              Approve Tx\n            </button>\n          ) : (\n            <button class=\"btn btn-danger my-2\" onClick={RevokeApproval}>\n              {\" \"}\n              Revoke Approval\n            </button>\n          )}\n\n          {numberOfConfirmations > 1 ? (\n            <button class=\"btn btn-success my-2 mx-3\" onClick={ExecuteTx}>\n              {\" \"}\n              Execute Tx{\" \"}\n            </button>\n          ) : (\n            \"\"\n          )}\n          <button class=\"btn btn-danger my-2 mx-1\" onClick={RevokeTx}>\n            {\" \"}\n            Revoke Tx\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ManageTx;\n","/home/serban/MultiSigWalletApplication/src/contract-interactions/FundContract.js",["41"],"import { parse } from \"@ethersproject/transactions\";\nimport { useState, useEffect } from \"react\";\nimport {\n  addressContract,\n  contractAbi,\n} from \"../info-contract/ContractDetails.js\";\n\nconst ethers = require(\"ethers\");\nconst utils = require(\"ethers\").utils;\n\nfunction FundContract(props) {\n  const [balance, setBalance] = useState(0.0);\n  const [txCount, setTxCount] = useState(0);\n\n  useEffect(() => {\n    GetBalance();\n  }, []);\n\n  async function GetBalance() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const balanceContract = await provider.getBalance(addressContract);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(addressContract, contractAbi, signer);\n\n    const nrTx = await contract.callStatic.getTxCount();\n\n    setTxCount(nrTx.toNumber());\n    setBalance(ethers.utils.formatEther(balanceContract));\n  }\n\n  // fund contract with +4 eth\n  async function SendEthContract() {\n    if (window.ethereum) {\n      try {\n        const tx = {\n          to: addressContract,\n          value: utils.parseEther(\"0.05\"),\n          chainId: \"31337\",\n        };\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        await signer.sendTransaction(tx).then(() => {\n          alert(\"Contract Funded\");\n          GetBalance();\n        });\n      } catch (error) {\n        alert(error);\n      }\n    }\n  }\n\n  return (\n    <div class=\"container font-link\">\n      <div class=\"row my-2\">\n        <h5>Address</h5>\n        <h6>\n          {\" \"}\n          <a href=\"https://rinkeby.etherscan.io/address/0x3363504Fe39A0cedD211547BE70898De5041fEc5\">\n            {addressContract}\n          </a>\n        </h6>\n      </div>\n      <div class=\"container my-5\">\n        <div class=\"row my-2\"> Eth stored: {balance} </div>\n        <div class=\"row my-2\"> Minimum Confirmations: 1</div>\n        <div class=\"row my-2\"> Total transactions: {txCount} </div>\n        <div class=\"row my-4\">\n          <button class=\"btn btn-success\" onClick={SendEthContract}>\n            Fund Contract +4 eth\n          </button>\n        </div>\n      </div>\n      <div class=\"d-flex mt-auto text-light\">Owner 1 address: 0xd6613bd...</div>\n      <div class=\"d-flex mt-auto text-light\">Owner 2 address: 0x1d2A9B5...</div>\n      <div class=\"d-flex mt-auto text-light\">Owner 3 address: 0x7099797...</div>\n      <div class=\"d-flex my-4\">\n        <div class=\"text-light\">Deployed: Rinkeby Testnet</div>\n      </div>\n      <div class=\"d-flex my-4\">Made by Serban C.</div>\n      <div></div>\n    </div>\n  );\n}\n\nexport default FundContract;\n","/home/serban/MultiSigWalletApplication/src/nav-bar/NavBar.js",["42"],"const ethers = require(\"ethers\");\n\nfunction NavBar(props) {\n  return (\n    <nav class=\"navbar navbar-dark bg-dark\">\n      <div class=\"container-fluid\">\n        <a class=\"font-link navbar-brand\">MultiSigWallet</a>\n        <div class=\"d-flex justify-content-end\">\n          <div class=\"font-link text-light \">\n            {\" \"}\n            Balance :{\" \"}\n            {Math.round(ethers.utils.formatEther(props.balance) * 1e4) /\n              1e4}{\" \"}\n            eth{\" \"}\n          </div>\n        </div>\n        <div class=\"d-flex justify-content-end\">\n          <div class=\"font-link text-light\">\n            Address connected: {props.address}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","/home/serban/MultiSigWalletApplication/src/connection-screen/ConnectionScreen.js",["43","44","45"],"import { useState, useEffect, useLayoutEffect } from \"react\";\nimport React from \"react\";\n\nconst ethers = require(\"ethers\");\n\nclass ConnectionScreent extends React.Component {\n  ethereum = window.ethereum;\n  state = { pass: false };\n\n  constructor(props) {\n    super(props);\n    this.ConnectWithMetamask = this.ConnectWithMetamask.bind(this);\n    this.MetamaskAccountConnection = this.MetamaskAccountConnection.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.ethereum) {\n      this.MetamaskAccountConnection();\n    } else {\n      alert(\"No connection found\");\n      this.setState({ pass: true });\n      this.render();\n    }\n\n    window.ethereum.on(\"accountsChanged\", () => {\n      this.MetamaskAccountConnection();\n    });\n  }\n\n  // Check if any acount is connected to metamask\n  async MetamaskAccountConnection() {\n    var provider = new ethers.providers.Web3Provider(this.ethereum);\n    const isMetaMaskConnected = async () => {\n      const accounts = await provider.listAccounts();\n      return accounts.length > 0;\n    };\n    await isMetaMaskConnected().then((connected) => {\n      if (connected) {\n        this.ConnectWithMetamask();\n      } else {\n        this.setState({ pass: true });\n        this.render();\n      }\n    });\n  }\n\n  // Connect with metamask if no account was detected\n  ConnectWithMetamask() {\n    this.ethereum\n      .request({ method: \"eth_requestAccounts\" })\n      .then((result) => {\n        this.props.setAccount(result[0]);\n        this.props.setConfirmation(true);\n        this.GetBalanceUser(result[0]);\n      })\n      .catch(() => {\n        this.setState({ pass: true });\n        this.render();\n      });\n  }\n\n  // Get balance of account\n  GetBalanceUser(address) {\n    this.ethereum\n      .request({ method: \"eth_getBalance\", params: [address, \"latest\"] })\n      .then((result) => {\n        this.props.setBalance(result);\n      });\n  }\n\n  render() {\n    return this.state.pass ? (\n      <div>\n        <div class=\"d-flex justify-content-center container w-50 my-5\">\n          <div class=\"card bg-dark w-75\">\n            <div class=\"card-title\">\n              <h1 class=\"font-link my-2 text-light\"> VAULT </h1>\n            </div>\n            <div class=\"card-body\">\n              <button\n                class=\"font-link btn btn-primary\"\n                onClick={this.ConnectWithMetamask}\n              >\n                {\" \"}\n                Connect Metamask{\" \"}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"d-flex justify-content-center container w-25 text-danger font-link\">\n          Stay chill. Just connect your metamask to a random site a dude gave\n          you and everything will be ok =)\n        </div>\n      </div>\n    ) : (\n      \"\"\n    );\n  }\n}\n\nexport default ConnectionScreent;\n","/home/serban/MultiSigWalletApplication/src/info-contract/ContractDetails.js",[],{"ruleId":"46","severity":1,"message":"47","line":2,"column":20,"nodeType":"48","messageId":"49","endLine":2,"endColumn":29},{"ruleId":"50","severity":1,"message":"51","line":19,"column":6,"nodeType":"52","endLine":19,"endColumn":19,"suggestions":"53"},{"ruleId":"46","severity":1,"message":"54","line":1,"column":10,"nodeType":"48","messageId":"49","endLine":1,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":7,"column":9,"nodeType":"57","endLine":7,"endColumn":43},{"ruleId":"46","severity":1,"message":"58","line":1,"column":10,"nodeType":"48","messageId":"49","endLine":1,"endColumn":18},{"ruleId":"46","severity":1,"message":"47","line":1,"column":20,"nodeType":"48","messageId":"49","endLine":1,"endColumn":29},{"ruleId":"46","severity":1,"message":"59","line":1,"column":31,"nodeType":"48","messageId":"49","endLine":1,"endColumn":46},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GetContractDetails'. Either include it or remove the dependency array.","ArrayExpression",["60"],"'parse' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'useLayoutEffect' is defined but never used.",{"desc":"61","fix":"62"},"Update the dependencies array to be: [GetContractDetails, props.value]",{"range":"63","text":"64"},[507,520],"[GetContractDetails, props.value]"]