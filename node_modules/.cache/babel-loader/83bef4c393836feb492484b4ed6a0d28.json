{"ast":null,"code":"var _jsxFileName = \"/home/serban/MultiSigWalletApplication/web3/src/connection-screen/ConnectionScreen.js\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ConnectionScreent extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.ethereum = window.ethereum;\n    this.state = {\n      pass: false\n    };\n  }\n\n  componentDidMount() {\n    this.ConnectWithMetamask();\n\n    if (this.ethereum.selectedAddress == null) {//this.ConnectWithMetamask();\n    } else {\n      this.setState({\n        pass: true\n      });\n      this.render();\n    }\n  }\n\n  ConnectWithMetamask() {\n    if (this.ethereum) {\n      this.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }).then(result => {\n        this.props.setAccount(result[0]);\n        this.props.setConfirmation(true);\n        this.GetBalanceUser(result[0]);\n      });\n    } else {\n      alert(\"No connection found\");\n    }\n  }\n\n  GetBalanceUser(address) {\n    this.ethereum.request({\n      method: \"eth_getBalance\",\n      params: [address, \"latest\"]\n    }).then(result => {\n      this.props.setBalance(result);\n    });\n  }\n\n  render() {\n    return this.state.pass ? /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container w-50 my-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          class: \"card-img-top img-responsive\",\n          src: \"lock-icon.png\",\n          alt: \"Card image cap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn btn-primary\",\n            onClick: this.ConnectWithMetamask,\n            children: [\" \", \"Connect Metamask\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this) : \"\";\n  }\n\n}\n\nexport default ConnectionScreent;","map":{"version":3,"sources":["/home/serban/MultiSigWalletApplication/web3/src/connection-screen/ConnectionScreen.js"],"names":["useState","useEffect","useLayoutEffect","React","ConnectionScreent","Component","ethereum","window","state","pass","componentDidMount","ConnectWithMetamask","selectedAddress","setState","render","request","method","then","result","props","setAccount","setConfirmation","GetBalanceUser","alert","address","params","setBalance"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,eAA9B,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAAA;AAAA;AAAA,SAC9CC,QAD8C,GACnCC,MAAM,CAACD,QAD4B;AAAA,SAE9CE,KAF8C,GAEtC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAFsC;AAAA;;AAI9CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,mBAAL;;AAEA,QAAI,KAAKL,QAAL,CAAcM,eAAd,IAAiC,IAArC,EAA2C,CACzC;AACD,KAFD,MAEO;AACL,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAAd;AACA,WAAKK,MAAL;AACD;AACF;;AAEDH,EAAAA,mBAAmB,GAAG;AACpB,QAAI,KAAKL,QAAT,EAAmB;AACjB,WAAKA,QAAL,CACGS,OADH,CACW;AAAEC,QAAAA,MAAM,EAAE;AAAV,OADX,EAEGC,IAFH,CAESC,MAAD,IAAY;AAChB,aAAKC,KAAL,CAAWC,UAAX,CAAsBF,MAAM,CAAC,CAAD,CAA5B;AACA,aAAKC,KAAL,CAAWE,eAAX,CAA2B,IAA3B;AACA,aAAKC,cAAL,CAAoBJ,MAAM,CAAC,CAAD,CAA1B;AACD,OANH;AAOD,KARD,MAQO;AACLK,MAAAA,KAAK,CAAC,qBAAD,CAAL;AACD;AACF;;AAEDD,EAAAA,cAAc,CAACE,OAAD,EAAU;AACtB,SAAKlB,QAAL,CACGS,OADH,CACW;AAAEC,MAAAA,MAAM,EAAE,gBAAV;AAA4BS,MAAAA,MAAM,EAAE,CAACD,OAAD,EAAU,QAAV;AAApC,KADX,EAEGP,IAFH,CAESC,MAAD,IAAY;AAChB,WAAKC,KAAL,CAAWO,UAAX,CAAsBR,MAAtB;AACD,KAJH;AAKD;;AAEDJ,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKN,KAAL,CAAWC,IAAX,gBACL;AAAK,MAAA,KAAK,EAAC,qBAAX;AAAA,6BACE;AAAK,QAAA,KAAK,EAAC,MAAX;AAAA,gCACE;AACE,UAAA,KAAK,EAAC,6BADR;AAEE,UAAA,GAAG,EAAC,eAFN;AAGE,UAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAK,UAAA,KAAK,EAAC,WAAX;AAAA,iCACE;AAAQ,YAAA,KAAK,EAAC,iBAAd;AAAgC,YAAA,OAAO,EAAE,KAAKE,mBAA9C;AAAA,uBACG,GADH,sBAEmB,GAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADK,GAiBL,EAjBF;AAmBD;;AAzD6C;;AA4DhD,eAAeP,iBAAf","sourcesContent":["import { useState, useEffect, useLayoutEffect } from \"react\";\nimport React from \"react\";\n\nclass ConnectionScreent extends React.Component {\n  ethereum = window.ethereum;\n  state = { pass: false };\n\n  componentDidMount() {\n    this.ConnectWithMetamask();\n\n    if (this.ethereum.selectedAddress == null) {\n      //this.ConnectWithMetamask();\n    } else {\n      this.setState({ pass: true });\n      this.render();\n    }\n  }\n\n  ConnectWithMetamask() {\n    if (this.ethereum) {\n      this.ethereum\n        .request({ method: \"eth_requestAccounts\" })\n        .then((result) => {\n          this.props.setAccount(result[0]);\n          this.props.setConfirmation(true);\n          this.GetBalanceUser(result[0]);\n        });\n    } else {\n      alert(\"No connection found\");\n    }\n  }\n\n  GetBalanceUser(address) {\n    this.ethereum\n      .request({ method: \"eth_getBalance\", params: [address, \"latest\"] })\n      .then((result) => {\n        this.props.setBalance(result);\n      });\n  }\n\n  render() {\n    return this.state.pass ? (\n      <div class=\"container w-50 my-5\">\n        <div class=\"card\">\n          <img\n            class=\"card-img-top img-responsive\"\n            src=\"lock-icon.png\"\n            alt=\"Card image cap\"\n          ></img>\n          <div class=\"card-body\">\n            <button class=\"btn btn-primary\" onClick={this.ConnectWithMetamask}>\n              {\" \"}\n              Connect Metamask{\" \"}\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : (\n      \"\"\n    );\n  }\n}\n\nexport default ConnectionScreent;\n"]},"metadata":{},"sourceType":"module"}