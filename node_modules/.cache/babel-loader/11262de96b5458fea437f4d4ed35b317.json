{"ast":null,"code":"var _jsxFileName = \"/home/serban/MultiSigWalletApplication/web3/src/connection-screen/ConnectionScreen.js\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ConnectionScreent extends React.Component {\n  constructor() {\n    super();\n    this.ethereum = window.ethereum;\n    this.state = {\n      pass: false\n    };\n    this.ConnectWithMetamask();\n  }\n\n  ConnectWithMetamask() {\n    if (this.ethereum) {\n      console.log(this.ethereum);\n      this.setState({\n        pass: true\n      });\n      this.render(); // this.ethereum\n      //   .request({ method: \"eth_requestAccounts\" })\n      //   .then((result) => {\n      //     this.props.setAccount(result[0]);\n      //     this.props.setConfirmation(true);\n      //     this.GetBalanceUser(result[0]);\n      //   })\n      //   .catch(() => {\n      //     this.setState({ pass: true });\n      //     this.render();\n      //   });\n    } else {\n      alert(\"No connection found\");\n    }\n  }\n\n  GetBalanceUser(address) {\n    this.ethereum.request({\n      method: \"eth_getBalance\",\n      params: [address, \"latest\"]\n    }).then(result => {\n      this.props.setBalance(result);\n    });\n  }\n\n  render() {\n    return this.state.pass ? /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container w-50 my-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          class: \"card-img-top img-responsive\",\n          src: \"lock-icon.png\",\n          alt: \"Card image cap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn btn-primary\",\n            onClick: this.ConnectWithMetamask,\n            children: [\" \", \"Connect Metamask\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this) : \"\";\n  }\n\n}\n\nexport default ConnectionScreent;","map":{"version":3,"sources":["/home/serban/MultiSigWalletApplication/web3/src/connection-screen/ConnectionScreen.js"],"names":["useState","useEffect","useLayoutEffect","React","ConnectionScreent","Component","constructor","ethereum","window","state","pass","ConnectWithMetamask","console","log","setState","render","alert","GetBalanceUser","address","request","method","params","then","result","props","setBalance"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,eAA9B,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAI9CC,EAAAA,WAAW,GAAG;AACZ;AADY,SAHdC,QAGc,GAHHC,MAAM,CAACD,QAGJ;AAAA,SAFdE,KAEc,GAFN;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAEM;AAEZ,SAAKC,mBAAL;AACD;;AAEDA,EAAAA,mBAAmB,GAAG;AACpB,QAAI,KAAKJ,QAAT,EAAmB;AACjBK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,QAAjB;AACA,WAAKO,QAAL,CAAc;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAAd;AACA,WAAKK,MAAL,GAHiB,CAIjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAfD,MAeO;AACLC,MAAAA,KAAK,CAAC,qBAAD,CAAL;AACD;AACF;;AAEDC,EAAAA,cAAc,CAACC,OAAD,EAAU;AACtB,SAAKX,QAAL,CACGY,OADH,CACW;AAAEC,MAAAA,MAAM,EAAE,gBAAV;AAA4BC,MAAAA,MAAM,EAAE,CAACH,OAAD,EAAU,QAAV;AAApC,KADX,EAEGI,IAFH,CAESC,MAAD,IAAY;AAChB,WAAKC,KAAL,CAAWC,UAAX,CAAsBF,MAAtB;AACD,KAJH;AAKD;;AAEDR,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKN,KAAL,CAAWC,IAAX,gBACL;AAAK,MAAA,KAAK,EAAC,qBAAX;AAAA,6BACE;AAAK,QAAA,KAAK,EAAC,MAAX;AAAA,gCACE;AACE,UAAA,KAAK,EAAC,6BADR;AAEE,UAAA,GAAG,EAAC,eAFN;AAGE,UAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAK,UAAA,KAAK,EAAC,WAAX;AAAA,iCACE;AAAQ,YAAA,KAAK,EAAC,iBAAd;AAAgC,YAAA,OAAO,EAAE,KAAKC,mBAA9C;AAAA,uBACG,GADH,sBAEmB,GAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADK,GAiBL,EAjBF;AAmBD;;AA1D6C;;AA6DhD,eAAeP,iBAAf","sourcesContent":["import { useState, useEffect, useLayoutEffect } from \"react\";\nimport React from \"react\";\n\nclass ConnectionScreent extends React.Component {\n  ethereum = window.ethereum;\n  state = { pass: false };\n\n  constructor() {\n    super();\n    this.ConnectWithMetamask();\n  }\n\n  ConnectWithMetamask() {\n    if (this.ethereum) {\n      console.log(this.ethereum);\n      this.setState({ pass: true });\n      this.render();\n      // this.ethereum\n      //   .request({ method: \"eth_requestAccounts\" })\n      //   .then((result) => {\n      //     this.props.setAccount(result[0]);\n      //     this.props.setConfirmation(true);\n      //     this.GetBalanceUser(result[0]);\n      //   })\n      //   .catch(() => {\n      //     this.setState({ pass: true });\n      //     this.render();\n      //   });\n    } else {\n      alert(\"No connection found\");\n    }\n  }\n\n  GetBalanceUser(address) {\n    this.ethereum\n      .request({ method: \"eth_getBalance\", params: [address, \"latest\"] })\n      .then((result) => {\n        this.props.setBalance(result);\n      });\n  }\n\n  render() {\n    return this.state.pass ? (\n      <div class=\"container w-50 my-5\">\n        <div class=\"card\">\n          <img\n            class=\"card-img-top img-responsive\"\n            src=\"lock-icon.png\"\n            alt=\"Card image cap\"\n          ></img>\n          <div class=\"card-body\">\n            <button class=\"btn btn-primary\" onClick={this.ConnectWithMetamask}>\n              {\" \"}\n              Connect Metamask{\" \"}\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : (\n      \"\"\n    );\n  }\n}\n\nexport default ConnectionScreent;\n"]},"metadata":{},"sourceType":"module"}