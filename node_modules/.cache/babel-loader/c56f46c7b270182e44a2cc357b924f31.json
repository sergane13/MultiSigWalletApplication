{"ast":null,"code":"var _jsxFileName = \"/home/serban/MultiSigWalletApplication/web3/src/connection-screen/ConnectionScreen.js\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ConnectionScreent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ethereum = window.ethereum;\n    this.state = {\n      pass: false\n    };\n    this.ConnectWithMetamask = this.ConnectWithMetamask.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.ethereum) {\n      if (this.ethereum.selectedAddress === null) {\n        this.setState({\n          pass: true\n        });\n        this.render();\n      }\n    } else {\n      alert(\"No connection found\");\n    }\n  }\n\n  ConnectWithMetamask() {\n    this.ethereum.request({\n      method: \"eth_requestAccounts\"\n    }).then(result => {\n      this.props.setAccount(result[0]);\n      this.props.setConfirmation(true);\n      this.GetBalanceUser(result[0]);\n    });\n  }\n\n  GetBalanceUser(address) {\n    this.ethereum.request({\n      method: \"eth_getBalance\",\n      params: [address, \"latest\"]\n    }).then(result => {\n      this.props.setBalance(result);\n    });\n  }\n\n  render() {\n    return this.state.pass ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"d-flex justify-content-center container w-50 my-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card bg-dark w-75\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card-title\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              class: \"font-link my-2 text-light\",\n              children: \" VAULT \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card-body\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"font-link btn btn-primary\",\n              onClick: this.ConnectWithMetamask,\n              children: [\" \", \"Connect Metamask\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"d-flex justify-content-center container\",\n        children: \"Stay chill. Just connect your metamask to a random site a dude gave you and everything will be ok =)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this) : \"\";\n  }\n\n}\n\nexport default ConnectionScreent;","map":{"version":3,"sources":["/home/serban/MultiSigWalletApplication/web3/src/connection-screen/ConnectionScreen.js"],"names":["useState","useEffect","useLayoutEffect","React","ConnectionScreent","Component","constructor","props","ethereum","window","state","pass","ConnectWithMetamask","bind","componentDidMount","selectedAddress","setState","render","alert","request","method","then","result","setAccount","setConfirmation","GetBalanceUser","address","params","setBalance"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,eAA9B,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAI9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAHnBC,QAGmB,GAHRC,MAAM,CAACD,QAGC;AAAA,SAFnBE,KAEmB,GAFX;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAEW;AAEjB,SAAKC,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA3B;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKN,QAAT,EAAmB;AACjB,UAAI,KAAKA,QAAL,CAAcO,eAAd,KAAkC,IAAtC,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEL,UAAAA,IAAI,EAAE;AAAR,SAAd;AACA,aAAKM,MAAL;AACD;AACF,KALD,MAKO;AACLC,MAAAA,KAAK,CAAC,qBAAD,CAAL;AACD;AACF;;AAEDN,EAAAA,mBAAmB,GAAG;AACpB,SAAKJ,QAAL,CAAcW,OAAd,CAAsB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAtB,EAAyDC,IAAzD,CAA+DC,MAAD,IAAY;AACxE,WAAKf,KAAL,CAAWgB,UAAX,CAAsBD,MAAM,CAAC,CAAD,CAA5B;AACA,WAAKf,KAAL,CAAWiB,eAAX,CAA2B,IAA3B;AACA,WAAKC,cAAL,CAAoBH,MAAM,CAAC,CAAD,CAA1B;AACD,KAJD;AAKD;;AAEDG,EAAAA,cAAc,CAACC,OAAD,EAAU;AACtB,SAAKlB,QAAL,CACGW,OADH,CACW;AAAEC,MAAAA,MAAM,EAAE,gBAAV;AAA4BO,MAAAA,MAAM,EAAE,CAACD,OAAD,EAAU,QAAV;AAApC,KADX,EAEGL,IAFH,CAESC,MAAD,IAAY;AAChB,WAAKf,KAAL,CAAWqB,UAAX,CAAsBN,MAAtB;AACD,KAJH;AAKD;;AAEDL,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKP,KAAL,CAAWC,IAAX,gBACL;AAAA,8BACE;AAAK,QAAA,KAAK,EAAC,mDAAX;AAAA,+BACE;AAAK,UAAA,KAAK,EAAC,mBAAX;AAAA,kCACE;AAAK,YAAA,KAAK,EAAC,YAAX;AAAA,mCACE;AAAI,cAAA,KAAK,EAAC,2BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAK,YAAA,KAAK,EAAC,WAAX;AAAA,mCACE;AACE,cAAA,KAAK,EAAC,2BADR;AAEE,cAAA,OAAO,EAAE,KAAKC,mBAFhB;AAAA,yBAIG,GAJH,sBAKmB,GALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAK,QAAA,KAAK,EAAC,yCAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,GAwBL,EAxBF;AA0BD;;AA/D6C;;AAkEhD,eAAeR,iBAAf","sourcesContent":["import { useState, useEffect, useLayoutEffect } from \"react\";\nimport React from \"react\";\n\nclass ConnectionScreent extends React.Component {\n  ethereum = window.ethereum;\n  state = { pass: false };\n\n  constructor(props) {\n    super(props);\n    this.ConnectWithMetamask = this.ConnectWithMetamask.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.ethereum) {\n      if (this.ethereum.selectedAddress === null) {\n        this.setState({ pass: true });\n        this.render();\n      }\n    } else {\n      alert(\"No connection found\");\n    }\n  }\n\n  ConnectWithMetamask() {\n    this.ethereum.request({ method: \"eth_requestAccounts\" }).then((result) => {\n      this.props.setAccount(result[0]);\n      this.props.setConfirmation(true);\n      this.GetBalanceUser(result[0]);\n    });\n  }\n\n  GetBalanceUser(address) {\n    this.ethereum\n      .request({ method: \"eth_getBalance\", params: [address, \"latest\"] })\n      .then((result) => {\n        this.props.setBalance(result);\n      });\n  }\n\n  render() {\n    return this.state.pass ? (\n      <div>\n        <div class=\"d-flex justify-content-center container w-50 my-5\">\n          <div class=\"card bg-dark w-75\">\n            <div class=\"card-title\">\n              <h1 class=\"font-link my-2 text-light\"> VAULT </h1>\n            </div>\n            <div class=\"card-body\">\n              <button\n                class=\"font-link btn btn-primary\"\n                onClick={this.ConnectWithMetamask}\n              >\n                {\" \"}\n                Connect Metamask{\" \"}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div class=\"d-flex justify-content-center container\">\n          Stay chill. Just connect your metamask to a random site a dude gave\n          you and everything will be ok =)\n        </div>\n      </div>\n    ) : (\n      \"\"\n    );\n  }\n}\n\nexport default ConnectionScreent;\n"]},"metadata":{},"sourceType":"module"}