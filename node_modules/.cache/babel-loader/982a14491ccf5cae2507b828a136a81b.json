{"ast":null,"code":"var _jsxFileName = \"/home/serban/MultiSigWalletApplication/web3/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ethers = require('ethers');\n\nconst utils = require(\"ethers\").utils;\n\nfunction App(props) {\n  _s();\n\n  const [account, setAccount] = useState('0x0');\n  const [balance, setBalance] = useState(0);\n  const [confirmation, setConfirmation] = useState(false);\n  const ethereum = window.ethereum;\n\n  function ConnectWithMetamask() {\n    if (ethereum) {\n      ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        console.log(result[0]);\n        setAccount(result[0]);\n        GetBalanceUser(result[0]);\n      });\n    } else {\n      console.log(\"No metamask\");\n    }\n  }\n\n  function GetBalanceUser(address) {\n    ethereum.request({\n      method: 'eth_getBalance',\n      params: [address, 'latest']\n    }).then(result => {\n      console.log(result);\n      setBalance(result);\n    });\n  }\n\n  async function SetContractToConnect() {\n    const contractAbi = [\"function getId() view returns(uint256)\", \"function submit(address recipient, uint256 value, bytes calldata data)\", \"function approve(uint txId)\", \"function execute(uint txId)\", \"function revokeApproval(uint txId)\"];\n    const addressContract = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(addressContract, contractAbi, signer);\n\n      try {\n        const tx = {\n          to: addressContract,\n          value: utils.parseEther(\"3.0\"),\n          chainId: 31337\n        };\n        const confirmationTx = await signer.sendTransaction(tx);\n\n        if (confirmationTx) {\n          setConfirmation(true);\n        }\n      } catch (error) {\n        console.log(\"ERRROR\");\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", props.somtheing, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: ConnectWithMetamask,\n      children: \" Connect Wallet \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", account, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", balance, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: SetContractToConnect,\n      children: \" Fund Contract \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", confirmation, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yha9S2MXopwYwdsBGWjJDN+PSLc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/serban/MultiSigWalletApplication/web3/src/App.js"],"names":["useEffect","useState","ethers","require","utils","App","props","account","setAccount","balance","setBalance","confirmation","setConfirmation","ethereum","window","ConnectWithMetamask","request","method","then","result","console","log","GetBalanceUser","address","params","SetContractToConnect","contractAbi","addressContract","provider","providers","Web3Provider","signer","getSigner","contract","Contract","tx","to","value","parseEther","chainId","confirmationTx","sendTransaction","error","somtheing"],"mappings":"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","sourcesContent":["import './App.css';\nimport {useEffect, useState} from 'react'\nconst ethers = require('ethers')\nconst utils = require(\"ethers\").utils;\n\nfunction App(props) {\n\n  const [account, setAccount] = useState('0x0')\n  const [balance, setBalance] = useState(0)\n  const [confirmation, setConfirmation] = useState(false)\n\n  const ethereum = window.ethereum;\n\n  function ConnectWithMetamask()\n  { \n    if(ethereum)\n    {\n      ethereum.request({method: 'eth_requestAccounts'})\n      .then(result => \n      {\n        console.log(result[0])\n        setAccount(result[0])\n        GetBalanceUser(result[0])\n      })  \n    }\n    else\n    {\n      console.log(\"No metamask\")\n    }\n  }\n\n  function GetBalanceUser(address)\n  {\n    ethereum.request({method: 'eth_getBalance', params: [address, 'latest']})\n      .then(result => \n      {\n        console.log(result)\n        setBalance(result)\n      })\n  }\n\n  async function SetContractToConnect()\n  {\n    const contractAbi = [\n      \"function getId() view returns(uint256)\",\n      \"function submit(address recipient, uint256 value, bytes calldata data)\",\n      \"function approve(uint txId)\",\n      \"function execute(uint txId)\",\n      \"function revokeApproval(uint txId)\",\n    ];\n\n    const addressContract = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\n\n    if(ethereum)\n    {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        addressContract,\n        contractAbi,\n        signer\n      )\n\n      try \n      {\n        const tx = {\n          to: addressContract,\n          value: utils.parseEther(\"3.0\"),\n          chainId: 31337\n        };\n        const confirmationTx = await signer.sendTransaction(tx);\n\n        if(confirmationTx)\n        {\n          setConfirmation(true);\n        }\n      } \n      catch (error) \n      {\n        console.log(\"ERRROR\")\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1> {props.somtheing} </h1>\n      <button onClick={ConnectWithMetamask}> Connect Wallet </button>\n      <h2> {account} </h2>\n      <h2> {balance} </h2>\n      <button onClick={SetContractToConnect}> Fund Contract </button>\n      <h2> {confirmation} </h2>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}